import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'application'
    id 'com.google.osdetector' version '1.7.3'
}


Date buildTimeAndDate = new Date()
ext {
    moduleName = 'eu.hansolo.trashtalk'
    platform   = osdetector.os == 'osx' ? osdetector.arch == 'aarch_64' ? 'mac-aarch64' : 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os == 'linux' ? osdetector.arch == 'aarch_64' ? 'linux-aarch64' : 'linux' : osdetector.os
}

application {
    mainClass = "eu.hansolo.trashtalk.Launcher"
    mainModule = moduleName
}


repositories {
    mavenCentral()
}

dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')
    implementation "org.openjfx:javafx-base:${javafxVersion}:${platform}"
    implementation "org.openjfx:javafx-graphics:${javafxVersion}:${platform}"
    implementation "org.openjfx:javafx-controls:${javafxVersion}:${platform}"
    implementation "eu.hansolo:toolbox:21.0.15";
}

jar {
    from {
        //duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        //configurations.runtimeClasspath.collect {  it.isDirectory() ? it : zipTree(it)  }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    manifest {
        attributes(
                'Bundle-Name'           : project.name,
                'Bundle-License'        : 'https://www.apache.org/licenses/LICENSE-2.0;description=Apache License Version 2.0;link=https://spdx.org/licenses/Apache-2.0.html',
                'Bundle-SymbolicName'   : 'eu.hansolo.trashtalk',
                'Export-Package'        : 'eu.hansolo.trashtalk',
                'Class-Path'            : "${project.name}-${project.version}.jar",
                'Main-Class'            : application.mainClass
        )
    }
}

task MarkAndSweep(type: JavaExec) {
    mainClass = 'eu.hansolo.trashtalk.markandsweep.MarkAndSweepLauncher'
    classpath = sourceSets.main.runtimeClasspath
}

task MarkAndCompact(type: JavaExec) {
    mainClass = 'eu.hansolo.trashtalk.markandcompact.MarkAndCompactLauncher'
    classpath = sourceSets.main.runtimeClasspath
}

task Copying(type: JavaExec) {
    mainClass = 'eu.hansolo.trashtalk.copying.CopyingLauncher'
    classpath = sourceSets.main.runtimeClasspath
}

task GenerationalMarkAndCompact(type: JavaExec) {
    mainClass = 'eu.hansolo.trashtalk.generationalmarkandcompact.GenerationalMarkAndCompactLauncher'
    classpath = sourceSets.main.runtimeClasspath
}

task RegionBased(type: JavaExec) {
    mainClass = 'eu.hansolo.trashtalk.regionbased.RegionBasedLauncher'
    classpath = sourceSets.main.runtimeClasspath
}